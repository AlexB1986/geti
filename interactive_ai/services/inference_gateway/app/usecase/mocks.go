// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"
	"inference_gateway/app/entities"

	mock "github.com/stretchr/testify/mock"
)

// NewMockInfer creates a new instance of MockInfer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInfer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInfer {
	mock := &MockInfer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInfer is an autogenerated mock type for the Infer type
type MockInfer struct {
	mock.Mock
}

type MockInfer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInfer) EXPECT() *MockInfer_Expecter {
	return &MockInfer_Expecter{mock: &_m.Mock}
}

// Batch provides a mock function for the type MockInfer
func (_mock *MockInfer) Batch(ctx context.Context, request *entities.BatchPredictionRequestData, includeXAI bool) ([][]byte, error) {
	ret := _mock.Called(ctx, request, includeXAI)

	if len(ret) == 0 {
		panic("no return value specified for Batch")
	}

	var r0 [][]byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.BatchPredictionRequestData, bool) ([][]byte, error)); ok {
		return returnFunc(ctx, request, includeXAI)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.BatchPredictionRequestData, bool) [][]byte); ok {
		r0 = returnFunc(ctx, request, includeXAI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.BatchPredictionRequestData, bool) error); ok {
		r1 = returnFunc(ctx, request, includeXAI)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInfer_Batch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Batch'
type MockInfer_Batch_Call struct {
	*mock.Call
}

// Batch is a helper method to define mock.On call
//   - ctx
//   - request
//   - includeXAI
func (_e *MockInfer_Expecter) Batch(ctx interface{}, request interface{}, includeXAI interface{}) *MockInfer_Batch_Call {
	return &MockInfer_Batch_Call{Call: _e.mock.On("Batch", ctx, request, includeXAI)}
}

func (_c *MockInfer_Batch_Call) Run(run func(ctx context.Context, request *entities.BatchPredictionRequestData, includeXAI bool)) *MockInfer_Batch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.BatchPredictionRequestData), args[2].(bool))
	})
	return _c
}

func (_c *MockInfer_Batch_Call) Return(bytess [][]byte, err error) *MockInfer_Batch_Call {
	_c.Call.Return(bytess, err)
	return _c
}

func (_c *MockInfer_Batch_Call) RunAndReturn(run func(ctx context.Context, request *entities.BatchPredictionRequestData, includeXAI bool) ([][]byte, error)) *MockInfer_Batch_Call {
	_c.Call.Return(run)
	return _c
}

// One provides a mock function for the type MockInfer
func (_mock *MockInfer) One(ctx context.Context, request *entities.PredictionRequestData, includeXAI bool) (string, error) {
	ret := _mock.Called(ctx, request, includeXAI)

	if len(ret) == 0 {
		panic("no return value specified for One")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.PredictionRequestData, bool) (string, error)); ok {
		return returnFunc(ctx, request, includeXAI)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.PredictionRequestData, bool) string); ok {
		r0 = returnFunc(ctx, request, includeXAI)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.PredictionRequestData, bool) error); ok {
		r1 = returnFunc(ctx, request, includeXAI)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInfer_One_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'One'
type MockInfer_One_Call struct {
	*mock.Call
}

// One is a helper method to define mock.On call
//   - ctx
//   - request
//   - includeXAI
func (_e *MockInfer_Expecter) One(ctx interface{}, request interface{}, includeXAI interface{}) *MockInfer_One_Call {
	return &MockInfer_One_Call{Call: _e.mock.On("One", ctx, request, includeXAI)}
}

func (_c *MockInfer_One_Call) Run(run func(ctx context.Context, request *entities.PredictionRequestData, includeXAI bool)) *MockInfer_One_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.PredictionRequestData), args[2].(bool))
	})
	return _c
}

func (_c *MockInfer_One_Call) Return(s string, err error) *MockInfer_One_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockInfer_One_Call) RunAndReturn(run func(ctx context.Context, request *entities.PredictionRequestData, includeXAI bool) (string, error)) *MockInfer_One_Call {
	_c.Call.Return(run)
	return _c
}
