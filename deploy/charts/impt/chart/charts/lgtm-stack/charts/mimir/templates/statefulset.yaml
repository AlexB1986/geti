apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "mimir.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mimir.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "mimir.selectorLabels" . | nindent 6 }}
  serviceName: {{ template "mimir.fullname" . }}-headless
  template:
    metadata:
      labels:
        {{- include "mimir.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-mimir.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "mimir.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountServiceAccountToken }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- if .Values.global.enable_local_image_pull_secret }}
      imagePullSecrets:
        - name: regcred
      {{- end }}
      initContainers:
        - name: volume-permissions
          image: "{{ .Values.global.busybox.registry }}/{{ if .Values.global.busybox.repository }}{{ .Values.global.busybox.repository }}/{{ end }}{{ .Values.global.busybox.name }}"
          imagePullPolicy: {{ .Values.init.imagePullPolicy }}
          securityContext:
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
              add:
                - CHOWN
                - DAC_READ_SEARCH
          command:
            - sh
            - -c
            - >-
              find /data -type d -exec chown -v {{ .Values.mimir.securityContext.runAsUser }} {} +
          volumeMounts:
            - mountPath: /data
              name: storage
              subPath: mimir
        # [mTLS STRICT] The kubectl-wait init container is used to wait for the init job that is related to this specific component.
        # This is a workaround to address the issue that arises when using Istio mTLS strict mode and init containers
        # that do not have the Istio proxy sidecar
        - name: "kubectl-wait"
          image: "{{ .Values.global.kubectl.registry }}/{{ if .Values.global.kubectl.repository }}{{ .Values.global.kubectl.repository }}/{{ end }}{{ .Values.global.kubectl.name }}"
          command: [ "/bin/bash", "-c" ]
          args:
            - >-
              kubectl wait jobs
              --timeout=1200s 
              --for=condition=complete 
              --namespace {{ .Release.Namespace }}
              init-job-{{ .Chart.Name }}
          securityContext:
            {{ toYaml .Values.init.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.initResources | nindent 12 }}            
      containers:
      - args:
        - -config.file=/conf/mimir.yaml
        {{- range $key, $value := .Values.mimir.extraArgs }}
        - "-{{ $key }}{{ if $value }}={{ $value }}{{ end }}"
        {{- end }}
        image: {{ .Values.mimir.image }}
        imagePullPolicy: {{ .Values.mimir.pullPolicy }}
        name: mimir
        ports:
        - containerPort: {{ .Values.mimir.httpListenPort }}
          name: http
          protocol: TCP
        resources:
          {{- toYaml .Values.mimir.resources | nindent 10 }}
        {{- with .Values.mimir.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        env:
          {{- with .Values.mimir.extraEnv }}
            {{- tpl (toYaml .) $ | nindent 10 }}
          {{- end }}
        {{- with .Values.mimir.extraEnvFrom }}
        envFrom:
          {{- tpl (toYaml .) $ | nindent 10 }}
        {{- end }}
        volumeMounts:
        {{- with .Values.mimir.extraVolumeMounts -}}
          {{- tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
        - mountPath: /conf
          name: mimir-conf
        - mountPath: /var/{{ include "mimir.name" . }}
          name: mimir-runtime
        {{- if .Values.persistence.enabled }}
        - mountPath: {{ .Values.persistence.mountPath }}
          name: storage
          readOnly: false
          subPath: mimir
        {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.extraVolumes -}}
        {{ toYaml .Values.extraVolumes | nindent 6 }}
      {{- end }}
      - configMap:
          name: {{ template "mimir.name" . }}
        name: mimir-conf
      - configMap:
          name: {{ template "mimir.name" . }}-runtime
        name: mimir-runtime
      {{- if .Values.persistence.enabled }}
      - name: storage
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existing_claim }}
      {{- end }}
  updateStrategy:
    type: {{- toYaml .Values.mimir.updateStrategy | nindent 6 }}
