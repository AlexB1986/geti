name: Components workflow

on:
  workflow_call:
    inputs:
      component_dir:
        description: "Dir in root directory"
        type: string
        required: true
      build_version:
        description: "Specifies the build version to apply to all binaries produced by this workflow"
        type: string
        required: true
      publish_binaries:
        description: "Enable publishing binaries to repos"
        type: boolean
        default: false
      ref:
        description: "The branch, tag or SHA to checkout"
        type: string
        default: ""
    secrets:
      AWS_ROLE:
        required: true
      AWS_REGION:
        required: true
      REGISTRY:
        required: true
  workflow_dispatch:
    inputs:
      ref:
        description: "The branch, tag or SHA to checkout"
        required: true
        default: "main"
      component_dir:
        description: "Path to the component (relative to the root of the repository)"
        required: true

permissions: {} # No permissions by default on workflow level

env:
  COMPONENT_DIR: ${{ inputs.component_dir }}

jobs:
  component-check:
    name: Component workflow
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    timeout-minutes: 30
    env:
      TAG: ${{ inputs.build_version || github.sha }}
      REGISTRY: ${{ secrets.REGISTRY }}
      PYTHON_BUILDER_IMAGE: builder-images/python-builder:v0.1
      GO_BUILDER_IMAGE: builder-images/go-builder:v0.1
    steps:
      - name: Harden the runner (audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          ref: ${{ inputs.ref || '' }}

      - name: Read component config
        id: component-config
        uses: ./.github/actions/read-component-config
        with:
          component_dir: ${{ env.COMPONENT_DIR }}

      - name: Initial cleanup
        if: steps.component-config.outputs.cleanup_type == 'initial' || steps.component-config.outputs.cleanup_type == 'all'
        uses: ./.github/actions/cleanup-runner
        with:
          type: "initial"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: Github
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Check if Python/Go project
        id: check-python-go
        run: |
          BUILDER_IMAGE=""
          if [ -f "${COMPONENT_DIR}/setup.py" ] || [ -f "${COMPONENT_DIR}/pyproject.toml" ] || [ -f "${COMPONENT_DIR}/.python" ]; then
            BUILDER_IMAGE=${REGISTRY}/${PYTHON_BUILDER_IMAGE}
          elif [ -f "${COMPONENT_DIR}/go.mod" ] || [ -f "${COMPONENT_DIR}/.go" ]; then
            BUILDER_IMAGE=${REGISTRY}/${GO_BUILDER_IMAGE}
          fi
          echo "BUILDER_IMAGE=${BUILDER_IMAGE}" >> $GITHUB_ENV
          echo "BUILDER_IMAGE=${BUILDER_IMAGE}"

      - name: Static code analysis
        run: make builder -C "${COMPONENT_DIR}" static-code-analysis

      - name: Unit testing
        run: make builder -C "${COMPONENT_DIR}" test-unit

      - name: Integration testing
        env:
          INPUTS_INTEGRATION_BUILDER: ${{ steps.component-config.outputs.integration_builder }}
        run: |
          if [[ "$INPUTS_INTEGRATION_BUILDER" == "false" ]]; then
            sudo apt-get update && sudo apt-get install -y ffmpeg && make -C "${COMPONENT_DIR}" test-integration
          else
            make builder -C "${COMPONENT_DIR}" test-integration
          fi

      - name: Pre-build cleanup
        if: steps.component-config.outputs.cleanup_type == 'pre-build' || steps.component-config.outputs.cleanup_type == 'all'
        uses: ./.github/actions/cleanup-runner
        with:
          type: "pre-build"

      - name: Build image
        id: build-image
        run: |
          OUTPUT=$(make -C "${COMPONENT_DIR}" build-image)
          if echo "$OUTPUT" | grep -q "Skipping"; then
            echo "SKIP_IMAGE=true" >> $GITHUB_OUTPUT
          fi

      - name: Push image
        if: steps.build-image.outputs.SKIP_IMAGE != 'true' && inputs.publish_binaries
        run: make -C "${COMPONENT_DIR}" publish-image

      - name: Lint chart
        if: steps.build-image.outputs.SKIP_IMAGE != 'true'
        run: make -C "${COMPONENT_DIR}" lint-chart

      - name: Publish chart
        if: steps.build-image.outputs.SKIP_IMAGE != 'true' && inputs.publish_binaries
        run: make -C "${COMPONENT_DIR}" publish-chart
