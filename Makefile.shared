# Copyright (C) 2022-2025 Intel Corporation
# LIMITED EDGE SOFTWARE DISTRIBUTION LICENSE

CWD = $(abspath $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST))))))

.PHONY: build-image-default list-image-default publish-image publish-chart-default lint-chart-default list-umbrella-chart-default

###
# version
###
PRODUCT_VERSION                    ?= $(shell cat $(CWD)/VERSION)
TAG                                ?= $(PRODUCT_VERSION)-$(shell git rev-parse --short HEAD)

###
# registries
###
REGISTRY                          ?= local
IMAGES_REGISTRY                   ?= ${REGISTRY}/geti
CHARTS_REGISTRY                   ?= ${REGISTRY}/geti/helm
BASE_IMAGES_REGISTRY              ?= ${REGISTRY}/base-images

###
# base images versions
###
BASE_OTE_V2_IMAGE_TAG             ?= 12.8.1.1.30

###
# component
###
TARGET_DIR                         := ./.build
CHART_TARGET_DIR                   := ${TARGET_DIR}/chart

CHART_SRC_DIR                         := ./chart
EXTRA_CHART_SRC_DIR                  ?=

###
# docker extra arguments
###
DOCKER_BUILD_CONTEXT              ?=

DOCKER_EXTRA_ARGS                 := \
    $(if $(REGISTRY),--build-arg REGISTRY=$(REGISTRY)) \
    $(if $(http_proxy),--build-arg http_proxy=$(http_proxy)) \
    $(if $(https_proxy),--build-arg https_proxy=$(https_proxy)) \
    $(if $(no_proxy),--build-arg no_proxy=$(no_proxy)) \
    $(if $(HTTP_PROXY),--build-arg HTTP_PROXY=$(HTTP_PROXY)) \
    $(if $(HTTPS_PROXY),--build-arg HTTPS_PROXY=$(HTTPS_PROXY)) \
    $(if $(NO_PROXY),--build-arg NO_PROXY=$(NO_PROXY))

DOCKER_IMAGE_DESCRIPTION          ?= Geti component: $(COMPONENT_NAME)

###
# docker builder extra arguments
###
DOCKER_PROXY                      := \
    $(if $(http_proxy),-e http_proxy=$(http_proxy)) \
    $(if $(https_proxy),-e https_proxy=$(https_proxy)) \
    $(if $(no_proxy),-e no_proxy=$(no_proxy)) \
    $(if $(HTTP_PROXY),-e HTTP_PROXY=$(HTTP_PROXY)) \
    $(if $(HTTPS_PROXY),-e HTTPS_PROXY=$(HTTPS_PROXY)) \
    $(if $(NO_PROXY),-e NO_PROXY=$(NO_PROXY))

###
# A space-separated list of build directories to be removed by the 'clean' target
###
CLEAN_DIRS :=

###
# docker images
###
build-image-default:
	@echo "Building docker image for component: ${COMPONENT_NAME}"
	@docker build \
		${DOCKER_EXTRA_ARGS} \
		${DOCKER_BUILD_CONTEXT} \
		--label "org.opencontainers.image.description=${DOCKER_IMAGE_DESCRIPTION}" \
		-t ${IMAGES_REGISTRY}/${COMPONENT_NAME}:${TAG} \
		-f ./Dockerfile .

list-image-default:
	@echo ${IMAGES_REGISTRY}/${COMPONENT_NAME}:${TAG}

publish-image:
	@echo "Pushing docker image for component: ${COMPONENT_NAME}"
	@docker push ${IMAGES_REGISTRY}/${COMPONENT_NAME}:${TAG}

###
# helm charts
###
build-chart-default:
	mkdir -p ${CHART_TARGET_DIR}
	cp -r ${CHART_SRC_DIR}/* ${CHART_TARGET_DIR}/
	@if [ -n "$(EXTRA_CHART_SRC_DIR)" ]; then \
        cp $(EXTRA_CHART_SRC_DIR) ${CHART_TARGET_DIR}/; \
    fi
	TAG=$(TAG) COMPONENT_NAME=$(COMPONENT_NAME) envsubst < ${CHART_TARGET_DIR}/Chart.yaml.template > ${CHART_TARGET_DIR}/Chart.yaml
	rm "${CHART_TARGET_DIR}/Chart.yaml.template"
	helm dependency update ${CHART_TARGET_DIR}
	helm package ${CHART_TARGET_DIR} --version ${TAG} --destination ${TARGET_DIR}

list-umbrella-chart-default:
	@echo ${CHARTS_REGISTRY}/${COMPONENT_NAME}:${TAG}

lint-chart-default: build-chart
	@echo "Running chart linter for component: ${COMPONENT_NAME}"
	helm lint --with-subcharts ${CHART_TARGET_DIR}

publish-chart-default: build-chart
	@echo "Publishing chart for component: ${COMPONENT_NAME}"
	helm push ${TARGET_DIR}/${COMPONENT_NAME}-${TAG}.tgz oci://${CHARTS_REGISTRY}

clean:
	@echo "Removing: $(TARGET_DIR)"
	rm -rf $(TARGET_DIR)
	@if [ -n "$(CLEAN_DIRS)" ]; then \
        echo "Removing: $(CLEAN_DIRS)"; \
        rm -rf $(CLEAN_DIRS); \
    fi

# To suppress warnings when overriding Makefile targets, declare the abstract targets as <name>-default
%:  %-default
	@  true

# Remove first goal from MAKECMDGOALS when using "make builder <goals_list>"
ifeq (builder,$(firstword $(MAKECMDGOALS)))
  BUILDER_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
  $(eval $(BUILDER_ARGS):;@:)
  ROOT_DIR=$(shell git rev-parse --show-toplevel)
  RELATIVE_PATH=$(shell python3 -c "import os.path; print(os.path.relpath('$(CURDIR)', '$(ROOT_DIR)'))")
endif

# Run builder container when do "make builder -C <directory> <args>"
builder-default:
	@if [ -n "$(BUILDER_IMAGE)" ]; then \
	    echo "Running make -C $(RELATIVE_PATH) $(BUILDER_ARGS) in the container: $(BUILDER_IMAGE)"; \
		docker run --rm -u $(shell id -u):$(shell getent group docker | cut -d: -f3) \
			-v "$(ROOT_DIR):/app" \
			-v /var/run/docker.sock:/var/run/docker.sock \
			-v ~/.docker/config.json:/home/bulider/.docker/config.json \
			-w "/app" ${DOCKER_PROXY} ${BUILDER_IMAGE} make -C $(RELATIVE_PATH) $(BUILDER_ARGS); \
    else \
        echo "Running make $(BUILDER_ARGS) locally"; \
        make $(BUILDER_ARGS); \
    fi
	@exit 0
